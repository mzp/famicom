# メモリマップ
MEMORY {
	HEADER:		start = $0000, size = $0010, file = %O, fill = yes;
	ROMST:		start = $8000, size = $7ffa, type = ro, file = %O, fill = yes, define = yes;
	ROMINFO:	start = $fffa, size = $0006, type = ro, file = %O, fill = yes, define = yes;
	ROMCHR:		start = $0000, size = $3F00, type = rw, fill = yes, define = yes;
	ZP:		start = $0000, size = $0020, type = rw, define = yes;
	RAM:		start = $0400, size = $0400, type = rw, define = yes;
	STACK:		start = $0200, size = $0200, type = rw, define = yes;
	SRAM:		start = $6000, size = $2000, type = rw, define = yes;
}

# セグメントマップ
SEGMENTS {
	HEADER:		load = HEADER,		type = ro;
	STARTUP:	load = ROMST,		type = ro,	define = yes;
	VECINFO:	load = ROMINFO,		type = ro,	define = yes;
	RODATA:		load = ROMST,		type = ro,	define = yes;
	DATA:		load = ROMST, run = RAM,type = rw,	define = yes;
	BSS:		load = RAM,		type = bss,	define = yes;
	ZEROPAGE:	load = ZP,		type = zp;
	CODE:		load = ROMST,		type = ro,	define = yes;
	CHARS:		load = ROMCHR,		type = ro;
}

FEATURES {
	CONDES: segment = RODATA,
		type = constructor,
		label = __CONSTRUCTOR_TABLE__,
		count = __CONSTRUCTOR_COUNT__;
	CONDES: segment = RODATA,
		type = destructor,
		label = __DESTRUCTOR_TABLE__,
		count = __DESTRUCTOR_COUNT__;
}

SYMBOLS {
	__STACKSIZE__ = $0200;
}
